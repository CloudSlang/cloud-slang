#   (c) Copyright 2014 Hewlett-Packard Development Company, L.P.
#   All rights reserved. This program and the accompanying materials
#   are made available under the terms of the Apache License v2.0 which accompany this distribution.
#
#   The Apache License is available at
#   http://www.apache.org/licenses/LICENSE-2.0

namespace: user.ops

imports:
  vars: test.env.vars

operations:
  - test_op:
      action:
        python_script: 'print "hello world"'

  - check_Weather:
      inputs:
        - city
      action:
        python_script: |
          weather = "weather thing"
          print city
      outputs:
        - weather: weather
      results:
        - SUCCESS: 'weather == "weather thing"'

  - get_time_zone:
      inputs:
        - time_zone_as_string
        - alla:
            variable: vars.alla
      action:
        python_script: |
            time_zone_as_int = int(time_zone_as_string)
            print 'time zone is: ' + str(time_zone_as_int)
      outputs:
        - time_zone: time_zone_as_int
      results:
        - NEGATIVE: int(time_zone_as_int) < 0
        - SUCCESS

  - compute_daylight_time_zone:
        inputs:
          - time_zone_as_string
        action:
          python_script: |
              daylight_time_zone = int(time_zone_as_string) + 1
              print 'daylight time zone is: ' + str(daylight_time_zone)
        outputs:
          - daylight_time_zone: daylight_time_zone
        results:
          - SUCCESS: 1 == 1

  - set_global_session_object:
      inputs:
        - value
      action:
        java_action:
          className: org.openscore.lang.systemtests.actions.LangTestActions
          methodName: setConnectionOnNonSerializableSession
      outputs:
        - session_object_value: value

  - get_global_session_object:
      inputs:
        - value
      action:
        java_action:
          className: org.openscore.lang.systemtests.actions.LangTestActions
          methodName: getConnectionFromNonSerializableSession
      outputs:
        - session_object_value: connection
      results:
        - SUCCESS: connection == fromInputs['value']
        - FAILURE

  - check_number:
      inputs:
        - number
      action:
        python_script: |
          remainder = number % 2
          isEven = remainder == 0
          tooBig = number > 512
      outputs:
        - preprocessed_number: str(fromInputs['number'] * 3)
      results:
        - EVEN: isEven == 'True' and tooBig == 'False'
        - ODD: isEven == 'False' and tooBig == 'False'
        - FAILURE # report failure if the number is too big

  - process_even_number:
      inputs:
        - even_number
        - offset: 32
      action:
        python_script: |
          processing_result = int(even_number) + offset
          print 'Even number processed. Result= ' + str(processing_result)

  - process_odd_number:
      inputs:
        - odd_number
      action:
        python_script:
          print 'Odd number processed. Result= ' + str(odd_number)

  - send_email_mock:
      inputs:
         - hostname
         - port
         - sender
         - recipient
         - subject
         - body
      action:
        python_script: |
          print 'Send email mock'
          print 'hostname: ' + hostname
          print 'port: ' + port
          print 'sender: ' + sender
          print 'recipient: ' + recipient
          print 'subject: ' + subject
          print 'body: ' + body

  - produce_default_navigation:
      inputs:
        - navigationType
      action:
        python_script:
          print 'Producing default navigation based on input'
      results:
        - SUCCESS: navigationType == 'success'
        - FAILURE: 1 == 1